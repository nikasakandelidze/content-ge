{
    "0": {
        "name": "Vitsi AI",
        "description": "What is Vitsi AI and how to us it",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "0"
    },
    "1": {
        "name": "Intro to Karel The Robot",
        "description": "What is Karel The Robot? Who created it and why? Where does Karel live? What's the Karel's world like",
        "node_type": "lecture",
        "texts":["Karel The Robot.md"],
        "videos":["rvYIy-gEhKU"],
        "questions":["questions.json"],
        "parent_id": "8"
    },
    "2": {
        "name": "Karel Commands",
        "description": "What commands can Karel carry-out",
        "node_type": "lecture",
        "texts":["Karel's Commands.md"],
        "videos":["9dCiUTtiBbs"],
        "questions":["questions.json"],
        "parent_id": "8"
    },
    "3": {
        "name": "Algorithm",
        "description": "What is an algorithm",
        "node_type": "lecture",
        "texts":["Algorithm.md"],
        "videos":["sFKvotjiYDQ"],
        "questions":["questions.json"],
        "parent_id": "8"
    },
    "4": {
        "name": "First Karel Program",
        "description": "How to create and run program to move Karel around",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":["First Karel Program.md"],
        "videos":["83YpGMqPLyU"],
        "questions":["questions.json"],
        "parent_id": "8"
    },
    "5": {
        "name": "History of Bugs in Programs",
        "description": "What is a bug in a program, what was a first bug?",
        "node_type": "lecture",
        "texts":["History of Bugs in Programs.md"],
        "videos":["zm0vYoJ9R0o"],
        "questions":["questions.json"],
        "parent_id": "8"
    },
    "6": {
        "name": "Bug in the First Karel Program",
        "description": "You should run Program for the correct world",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":["Bug in the First Karel Program.md"],
        "videos":["Lw-w89I8LTA"],
        "questions":[],
        "parent_id": "8"
    },
    "7": {
        "name": "New Functions",
        "description": "How can you teach Karel new functions",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":["New Functions.md"],
        "videos":["eXw9wQ5Fbj8"],
        "questions":[],
        "parent_id": "8"
    },
    "8": {
        "name": "Why Do We Need New Functions",
        "description": "Why do we create and how do we use new functions?",
        "node_type": "lecture",
        "texts":["Why Do We Need New Functions.md"],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "9": {
        "name": "Whitespace and Indentation",
        "description": "What's the use of whitespace(enters, spaces, tabs...) in a program",
        "node_type": "lecture",
        "texts":["Whitespace and Indentation.md"],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "10": {
        "name": "`for` Loop in Karel",
        "description": "Repeat the list of commands N times",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":["for Loop in Karel.md"],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "11": {
        "name": "Conditions in Karel",
        "description": "Karel can test some conditions in its world",
        "node_type": "lecture",
        "texts":["Conditions in Karel.md"],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "12": {
        "name": "`while` Loop in Karel",
        "description": "Repeat the list of commands until some condition is true",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":["while Loop in Karel.md"],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "13": {
        "name": "Incorrect `while` Loop in Karel",
        "description": "`while` loop executes either all of the commands listed in the body or none",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":["Incorrect while Loop in Karel.md"],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "14": {
        "name": "`if` Statement in Karel",
        "description": "Execute only if condition is true",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "15": {
        "name": "`if-else` Statement in Karel",
        "description": "If condition is true execute this, else execute that",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "16": {
        "name": "Without `else` Statement",
        "description": "Theoretically you can write any code without using else",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "17": {
        "name": "Nested Statements",
        "description": "We can nest `for`, `while` and `if` operators anyway we want",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "18": {
        "name": "SteepleChaseKarel Problem",
        "description": "In the world of length 9, there are hurdles in some of the streets. Karel should jump over them all",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "19": {
        "name": "Common Errors - OBOB",
        "description": "Off by one bug",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "20": {
        "name": "Common Errors - Infinite Loop",
        "description": "Sometimes loop might continue infinitely",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "21": {
        "name": "Comments in Karel",
        "description": "What is a comment in code, what type of comments do we have",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "22": {
        "name": "Thinking Processes - Bottom Up Design",
        "description": "What is the thinking process, what is the bottom up approach",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "23": {
        "name": "Thinking Processes - Top Down Design",
        "description": "What is the Top Down Design thinking process, aka stepwise refinement, aka decomposition",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "24": {
        "name": "SteepleChaseKarel With Decomposition",
        "description": "How to solve SteepleChaseKarel problem with decomposition",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "25": {
        "name": "DoubleBeepersKarel Problem",
        "description": "Double the pile of beepers in front of Karel",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "26": {
        "name": "Do Your Thing Karel Program",
        "description": "Example of the program that does the job, but is very bad",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "27":{
        "name": "Good Programming Style for Karel",
        "description": "Good naming. camelCase",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "28":{
        "name": "Good Decomposition",
        "description": "How to write good code, tips of good decomposition",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "29":{
        "name": "CleanUpKarel Problem",
        "description": "Lot's of beepers in the world, write the program to clean them up",
        "environment":"karel_js",
        "node_type": "lecture",
        "texts":[],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    },
    "e1": {
        "name": "MoveKarel",
        "environment":"karel_js",
        "node_type": "example",
        "texts":["MoveKarel Problem.md", "MoveKarel Solution.md"],
        "videos":[],
        "questions":[],
        "parent_id": "8"
    }
}